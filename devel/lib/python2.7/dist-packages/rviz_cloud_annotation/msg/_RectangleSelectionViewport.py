# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rviz_cloud_annotation/RectangleSelectionViewport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class RectangleSelectionViewport(genpy.Message):
  _md5sum = "6a3c9a6075ac79ec934409411b5e99c9"
  _type = "rviz_cloud_annotation/RectangleSelectionViewport"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 start_x
uint32 start_y
uint32 end_x
uint32 end_y

uint32 viewport_height
uint32 viewport_width

float32 focal_length

float32[16] projection_matrix
geometry_msgs/Pose camera_pose

bool is_deep_selection

int32[] polyline_x
int32[] polyline_y

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['start_x','start_y','end_x','end_y','viewport_height','viewport_width','focal_length','projection_matrix','camera_pose','is_deep_selection','polyline_x','polyline_y']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','float32','float32[16]','geometry_msgs/Pose','bool','int32[]','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_x,start_y,end_x,end_y,viewport_height,viewport_width,focal_length,projection_matrix,camera_pose,is_deep_selection,polyline_x,polyline_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RectangleSelectionViewport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.start_x is None:
        self.start_x = 0
      if self.start_y is None:
        self.start_y = 0
      if self.end_x is None:
        self.end_x = 0
      if self.end_y is None:
        self.end_y = 0
      if self.viewport_height is None:
        self.viewport_height = 0
      if self.viewport_width is None:
        self.viewport_width = 0
      if self.focal_length is None:
        self.focal_length = 0.
      if self.projection_matrix is None:
        self.projection_matrix = [0.] * 16
      if self.camera_pose is None:
        self.camera_pose = geometry_msgs.msg.Pose()
      if self.is_deep_selection is None:
        self.is_deep_selection = False
      if self.polyline_x is None:
        self.polyline_x = []
      if self.polyline_y is None:
        self.polyline_y = []
    else:
      self.start_x = 0
      self.start_y = 0
      self.end_x = 0
      self.end_y = 0
      self.viewport_height = 0
      self.viewport_width = 0
      self.focal_length = 0.
      self.projection_matrix = [0.] * 16
      self.camera_pose = geometry_msgs.msg.Pose()
      self.is_deep_selection = False
      self.polyline_x = []
      self.polyline_y = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6If().pack(_x.start_x, _x.start_y, _x.end_x, _x.end_y, _x.viewport_height, _x.viewport_width, _x.focal_length))
      buff.write(_get_struct_16f().pack(*self.projection_matrix))
      _x = self
      buff.write(_get_struct_7dB().pack(_x.camera_pose.position.x, _x.camera_pose.position.y, _x.camera_pose.position.z, _x.camera_pose.orientation.x, _x.camera_pose.orientation.y, _x.camera_pose.orientation.z, _x.camera_pose.orientation.w, _x.is_deep_selection))
      length = len(self.polyline_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.polyline_x))
      length = len(self.polyline_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.polyline_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.camera_pose is None:
        self.camera_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.start_x, _x.start_y, _x.end_x, _x.end_y, _x.viewport_height, _x.viewport_width, _x.focal_length,) = _get_struct_6If().unpack(str[start:end])
      start = end
      end += 64
      self.projection_matrix = _get_struct_16f().unpack(str[start:end])
      _x = self
      start = end
      end += 57
      (_x.camera_pose.position.x, _x.camera_pose.position.y, _x.camera_pose.position.z, _x.camera_pose.orientation.x, _x.camera_pose.orientation.y, _x.camera_pose.orientation.z, _x.camera_pose.orientation.w, _x.is_deep_selection,) = _get_struct_7dB().unpack(str[start:end])
      self.is_deep_selection = bool(self.is_deep_selection)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.polyline_x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.polyline_y = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6If().pack(_x.start_x, _x.start_y, _x.end_x, _x.end_y, _x.viewport_height, _x.viewport_width, _x.focal_length))
      buff.write(self.projection_matrix.tostring())
      _x = self
      buff.write(_get_struct_7dB().pack(_x.camera_pose.position.x, _x.camera_pose.position.y, _x.camera_pose.position.z, _x.camera_pose.orientation.x, _x.camera_pose.orientation.y, _x.camera_pose.orientation.z, _x.camera_pose.orientation.w, _x.is_deep_selection))
      length = len(self.polyline_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.polyline_x.tostring())
      length = len(self.polyline_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.polyline_y.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.camera_pose is None:
        self.camera_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.start_x, _x.start_y, _x.end_x, _x.end_y, _x.viewport_height, _x.viewport_width, _x.focal_length,) = _get_struct_6If().unpack(str[start:end])
      start = end
      end += 64
      self.projection_matrix = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=16)
      _x = self
      start = end
      end += 57
      (_x.camera_pose.position.x, _x.camera_pose.position.y, _x.camera_pose.position.z, _x.camera_pose.orientation.x, _x.camera_pose.orientation.y, _x.camera_pose.orientation.z, _x.camera_pose.orientation.w, _x.is_deep_selection,) = _get_struct_7dB().unpack(str[start:end])
      self.is_deep_selection = bool(self.is_deep_selection)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.polyline_x = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.polyline_y = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16f = None
def _get_struct_16f():
    global _struct_16f
    if _struct_16f is None:
        _struct_16f = struct.Struct("<16f")
    return _struct_16f
_struct_6If = None
def _get_struct_6If():
    global _struct_6If
    if _struct_6If is None:
        _struct_6If = struct.Struct("<6If")
    return _struct_6If
_struct_7dB = None
def _get_struct_7dB():
    global _struct_7dB
    if _struct_7dB is None:
        _struct_7dB = struct.Struct("<7dB")
    return _struct_7dB
